佤 = 0
侰 = ~(佤)*~(佤)
俴 = 侰+侰
def 䯂(䵦):
    굴 = 佤
    굿 = 佤
    괠 = [佤]*(俴**(俴*俴))
    궓 = [佤]*100
    괣 = []
    while 䵦[굴][佤] != "듃":
        굸 = 䵦[굴][佤].lower()
        亀 = 䵦[굴][侰:]
        if 굸 == "뉃": #add dest source1 source2
            괠[亀[佤]] = 괠[亀[侰]] + 괠[亀[俴]]
        elif 굸 == "렀":
            괠[亀[佤]] = 괠[亀[侰]] ^ 괠[亀[俴]]
        elif 굸 == "렳":
            괠[亀[佤]] = 괠[亀[侰]] - 괠[亀[俴]]
        elif 굸 == "냃":
            괠[亀[佤]] = 괠[亀[侰]] * 괠[亀[俴]]
        elif 굸 == "뢯":
            괠[亀[佤]] = 괠[亀[侰]] / 괠[亀[俴]]
        elif 굸 == "륇":
            괠[亀[佤]] = 괠[亀[侰]] & 괠[亀[俴]]
        elif 굸 == "맳":
            괠[亀[佤]] = 괠[亀[侰]] | 괠[亀[俴]]
        elif 굸 == "괡":
            괠[亀[佤]] = 괠[亀[佤]]
        #storing/loading
        elif 굸 == "뫇": #mov dest source
            괠[亀[佤]] = 괠[亀[侰]]
        elif 굸 == "꼖":
            괠[亀[佤]] = 亀[侰]
        elif 굸 == "뫻":
            궓[亀[佤]] = 괠[亀[侰]]
        elif 굸 == "딓":
            괠[亀[佤]] = 궓[亀[侰]]
        elif 굸 == "댒":
            괠[亀[佤]] = 佤
        elif 굸 == "묇":
            궓[亀[佤]] = 佤
        elif 굸 == "묟":
            괠[亀[佤]] = input(괠[亀[侰]])
        elif 굸 == "꽺":
            궓[亀[佤]] = input(괠[亀[侰]])
        elif 굸 == "돯":
            print(괠[亀[佤]])
        elif 굸 == "뭗":
            print(궓[亀[佤]])
        #beginning of jumping
        elif 굸 == "뭿":
            굴 = 괠[亀[佤]]
        elif 굸 == "뮓":
            굴 = 궓[亀[佤]]
        #conditional jumping
        elif 굸 == "뮳":
            굴 = 괣.pop()
        elif 굸 == "믃": #> dest test1 test2
            if 괠[亀[侰]] > 괠[亀[俴]]:
                굴 = 亀[佤]
                괣.append(굴)
                continue
        elif 굸 == "꽲": #strcmp str1addr str2addr jmpaddr. jump if not equals
            괠[7] = 佤
            for i in range(len(괠[亀[佤]])):
                if 괠[亀[佤]] != 괠[亀[侰]]:
                    괠[7] = 侰
                    굴 = 괠[亀[俴]]
                    괣.append(굴)
        elif 굸 == "꾮":
            괢 = ""
            for i in range(len(괠[亀[佤]])):
                괢 += chr(ord(괠[亀[佤]][i]) ^ 괠[亀[侰]])
            괠[亀[佤]] = 괢
        elif 굸 == "꿚":
            괢 = ""
            for i in range(len(괠[亀[佤]])):
                괢 += chr(ord(괠[亀[佤]][i]) - 괠[亀[侰]])
            괠[亀[佤]] = 괢
        elif 굸 == "떇": #> dest test1 test2
            if 괠[亀[侰]] > 괠[亀[俴]]:
                굴 = 괠[亀[佤]]
                괣.append(굴)
                continue
        elif 굸 == "뗋": #> dest test1 test2
            if 괠[亀[侰]] > 괠[亀[俴]]:
                굴 = 궓[亀[佤]]
                괣.append(굴)
                continue
        elif 굸 == "똷": #> dest test1 test2
            if 괠[亀[侰]] == 괠[亀[俴]]:
                굴 = 亀[佤]
                괣.append(굴)
                continue
        elif 굸 == "뚫": #> dest test1 test2
            if 괠[亀[侰]] == 괠[亀[俴]]:
                굴 = 괠[亀[佤]]
                괣.append(굴)
                continue
        elif 굸 == "띇": #> dest test1 test2
            if 괠[亀[侰]] == 괠[亀[俴]]:
                굴 = 궓[亀[佤]]
                괣.append(굴)
                continue
        굴 += 侰
䯂([
        ["꼖", 佤, "Authentication token: "],
        ["꽺", 佤, 佤],
        ["꼖", 6, 'á×äÓâæíäàßåÉÛãåäÉÖÓÉäàÓÉÖÓåäÉÓÚÕæïèäßÙÚÉÛÓäàÙÔÉÓâæÉàÓÚÕÓÒÙæäàÉäàßåÉßåÉäàÓÉÚÓáÉ·Ôâ×ÚÕÓÔÉ³ÚÕæïèäßÙÚÉÅä×ÚÔ×æÔÉ×Úïá×ïåÉßÉÔÙÚäÉæÓ×ÜÜïÉà×âÓÉ×ÉÑÙÙÔÉâßÔÉÖãäÉßÉæÓ×ÜÜïÉÓÚÞÙïÉäàßåÉåÙÚÑÉßÉàÙèÓÉïÙãÉáßÜÜÉÓÚÞÙïÉßäÉ×åáÓÜÜ\x97ÉïÙãäãÖÓ\x9aÕÙÛ\x99á×äÕà©â«³£ï²ÕÔÈ·±â¨ë'],
        ["꼖", 俴, 俴**(3*俴+侰)-(俴**(俴+侰))], #reg 2 = 120
        ["꼖", 4, 15], #reg 4 = 15
        ["꼖", 3, 侰], #reg 3 = 1
        ["냃", 俴, 俴, 3], # reg 2 = 120
        ["뉃", 俴, 俴, 4], # reg 2 = 135
        ["괡", 佤, 俴],
        ["댒", 3],

        ["꾮", 6, 3],

        ["꼖", 佤, "Thanks."], #reg 0 = "..."
        ["꼖", 侰, "Authorizing access..."], #reg 1 = "..."
        ["돯", 佤], # print("Thanks")

        ["딓", 佤, 佤], # move input to register 0

        ["꾮", 佤, 俴], #xor the input with reg 2
        ["꿚", 佤, 4], #reg 0 = input ^ reg 2 - 15.

        ["꼖", 5, 19],
        ["꽲", 佤, 6, 5], # string compare the (input ^ 135) - 15 with (flag ^ 135) - 15
        ["돯", 侰],
        ["듃"],
        ["꼖", 侰, "Access denied!"],
        ["돯", 侰],
        ["듃"]
    ])
